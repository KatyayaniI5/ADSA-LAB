#include<stdio.h>
#include<limits.h>
#define INF 99999
int k,l,j;
int MINI(int cost[5][5],int n,int m,int *k,int *l)
{
    int i,j,mi=INF;
    *k=*l=-1;
   
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            if( cost[i][j]!=0 &&mi>cost[i][j])
            {
            mi=cost[i][j];
           *k=i;
            *l=j;
            }
        }
    }
}
int findMinCostIndex(int cost[5][5], int near[5], int n)
{
    int minCost = INT_MAX;
    int j = -1;

    for (int x= 0; x< n; x++) {
        if (near[x] != 0 && cost[x][near[x]] < minCost) {
            minCost = cost[x][near[x]];
            j=x;
        }
    }

    return j;
}
int prim(int t[5][2],int n,int cost[5][5])
{
    int i,b,min=0;
    int near[n];
    MINI(cost,5,5,&k,&l);
    t[0][0]=k;
    t[0][1]=l;
    min=cost[k][l];
    for( i=0;i<n;i++)
    {
        if(cost[i][l]<cost[i][k])
        near[i]=l;
        else 
        near[i]=k;
    }
     near[k]=0;
     near[l]=0;
     for(i=1;i<n-1;i++)
     {
        j=findMinCostIndex(cost,near,n);
        if(j==-1)break;
        t[i][0]=j;
        t[i][1]=near[j];
        min+=cost[j][near[j]];
        near[j]=0;
        for(b=0;b<n;b++)
        {
            if(near[b]!=0 && cost[b][near[b]]>cost[b][j])
            near[b]=j;
        }
     }
        return min;
 }
     int main()
     {
         int V=5;
           int cost[5][5] = {
        {0, 2, 0, 6, 0},
        {2, 0, 3, 8, 5},
        {0, 3, 0, 0, 7},
        {6, 8, 0, 0, 9},
        {0, 5, 7, 9, 0}
    };
          int n=5;
          int m=5;
          int t[5][2];
          int y=prim(t,n,cost);
          printf("Minimum cost:%d",y);
         
          return 0;
          
     }
    
